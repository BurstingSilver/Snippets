/**********************************************/
/*** Variables ***/
/**********************************************/
DECLARE @publichingCode AS varchar(5) = 'A'
DECLARE @imisInstallPath AS NVARCHAR(200) = N'C:\Program Files (x86)\ASI\Instance\'
DECLARE @destDBName AS VARCHAR(25) = 'CLIENT DB Name'
DECLARE @StaffWebsiteRootUrl varchar(MAX) = 'https://www.instanceurl.com/dev/'
DECLARE @StaffSecureWebsiteRootUrl varchar(MAX) = 'https://www.instanceurl.com/dev/'
DECLARE @Staffstring XML
DECLARE @StaffName varchar(MAX) = 'Staff'
declare @xml xml

DECLARE @MemberWebsiteRootUrl varchar(MAX) = 'https://www.instanceurl.com/dev/'
DECLARE @MemberSecureWebsiteRootUrl varchar(MAX) = 'https://www.instanceurl.com/dev/'
DECLARE @Memberstring XML
DECLARE @MemberName varchar(MAX) = 'Member Portal Site Name'
declare @xmlMember xml

DECLARE @DesktopWebsiteRootUrl varchar(MAX) = 'https://www.instanceurl.com/dev/'
DECLARE @DesktopSecureWebsiteRootUrl varchar(MAX) = 'https://www.instanceurl.com/dev/'
DECLARE @Desktopstring XML
DECLARE @DesktopName varchar(MAX) = 'CS'
declare @xmlDesktop xml

IF EXISTS (SELECT * FROM System_Params WHERE ParameterName = 'System_Control.SystemName') BEGIN
       UPDATE System_Params
       SET ShortValue = @destDBName + ' ' + CONVERT(VARCHAR(10), GETDATE(), 101)
       WHERE ParameterName = 'System_Control.SystemName'
END
ELSE BEGIN
       INSERT INTO System_Params (ParameterName, ShortValue)
       VALUES ('System_Control.SystemName', @destDBName + ' ' + CONVERT(VARCHAR(10), GETDATE(), 101))
END

--!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
--******** Temporary Email Mask ********
--!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
ALTER TABLE NAME DISABLE TRIGGER ALL
UPDATE NAME
SET EMAIL = CONCAT(ID,'@clientdomain.com')
ALTER TABLE NAME ENABLE TRIGGER ALL

ALTER TABLE NAME_ADDRESS DISABLE TRIGGER ALL
UPDATE NAME_ADDRESS
SET EMAIL = CONCAT(ID,'@clientdomain.com')
ALTER TABLE NAME_ADDRESS ENABLE TRIGGER ALL


/**********************************************/
/*** Update Publishing Servers ***/
/**********************************************/

UPDATE PublishServerRef
SET LocalPublishPath = @imisInstallPath + 'net',
LocalProtectedPath = @imisInstallPath + 'indexServiceProtected'
WHERE PublishServerCode = @publichingCode
SET NOCOUNT ON
SET ANSI_DEFAULTS ON
SET IMPLICIT_TRANSACTIONS OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET NOCOUNT ON
/**********************************************/
/*** Update Publishing Url For Staff Site ***/
/**********************************************/
SET @xml=(select CAST(SUBSTRING(Blob, 1, DATALENGTH(Blob)) as XML)
FROM [dbo].[DocumentMain]
WHERE  DocumentTypeCode = 'WEB'
AND DocumentName = @StaffName
AND DocumentStatusCode = '40')
SET @xml.modify('declare namespace ns="http://schemas.imis.com/2008/01/DataContracts/Website";replace value of (/ns:Website/ns:WebsiteRootUrl/text())[1] with sql:variable("@StaffWebsiteRootUrl")')
SET @xml.modify('declare namespace ns="http://schemas.imis.com/2008/01/DataContracts/Website";replace value of (/ns:Website/ns:SecureWebsiteRootUrl/text())[1] with sql:variable("@StaffSecureWebsiteRootUrl")')
UPDATE DocumentMain
SET Blob = CONVERT(varchar(MAX), @xml)
WHERE  DocumentTypeCode = 'WEB'
AND DocumentName = @StaffName
AND DocumentStatusCode = '40'

SET @xmlMember=(select CAST(SUBSTRING(Blob, 1, DATALENGTH(Blob)) as XML)
FROM [dbo].[DocumentMain]
WHERE  DocumentTypeCode = 'WEB'
AND DocumentName = @MemberName
AND DocumentStatusCode = '40')
SET @xmlMember.modify('declare namespace ns="http://schemas.imis.com/2008/01/DataContracts/Website";replace value of (/ns:Website/ns:WebsiteRootUrl/text())[1] with sql:variable("@MemberWebsiteRootUrl")')
SET @xmlMember.modify('declare namespace ns="http://schemas.imis.com/2008/01/DataContracts/Website";replace value of (/ns:Website/ns:SecureWebsiteRootUrl/text())[1] with sql:variable("@MemberSecureWebsiteRootUrl")')
UPDATE DocumentMain
SET Blob = CONVERT(varchar(MAX), @xmlMember)
WHERE  DocumentTypeCode = 'WEB'
AND DocumentName = @MemberName
AND DocumentStatusCode = '40'

SET @xmlDesktop=(select CAST(SUBSTRING(Blob, 1, DATALENGTH(Blob)) as XML)
FROM [dbo].[DocumentMain]
WHERE  DocumentTypeCode = 'WEB'
AND DocumentName = @DesktopName
AND DocumentStatusCode = '40')
SET @xmlDesktop.modify('declare namespace ns="http://schemas.imis.com/2008/01/DataContracts/Website";replace value of (/ns:Website/ns:WebsiteRootUrl/text())[1] with sql:variable("@DesktopWebsiteRootUrl")')
SET @xmlDesktop.modify('declare namespace ns="http://schemas.imis.com/2008/01/DataContracts/Website";replace value of (/ns:Website/ns:SecureWebsiteRootUrl/text())[1] with sql:variable("@DesktopSecureWebsiteRootUrl")')
UPDATE DocumentMain
SET Blob = CONVERT(varchar(MAX), @xmlDesktop)
WHERE  DocumentTypeCode = 'WEB'
AND DocumentName = @DesktopName
AND DocumentStatusCode = '40'

SET ANSI_DEFAULTS ON
SET IMPLICIT_TRANSACTIONS OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
GO

-------------------------------------------------------------------------------
-- Ensure required Name_Fin, Name_Security, and Name_Security_Groups rows exist
-------------------------------------------------------------------------------
INSERT INTO Name_Fin (ID)
SELECT a.ID FROM Name a LEFT OUTER JOIN Name_Fin b ON a.ID = b.ID
WHERE b.ID IS NULL
GO
INSERT INTO Name_Security (ID)
SELECT a.ID FROM Name a LEFT OUTER JOIN Name_Security b ON a.ID = b.ID
WHERE b.ID IS NULL
GO
INSERT INTO Name_Security_Groups (ID)
SELECT a.ID FROM Name a LEFT OUTER JOIN Name_Security_Groups b ON a.ID = b.ID
WHERE b.ID IS NULL
GO

-----------------------------------------
-- Add SYSTEM user if not already present
-- and Update it if already exists
-----------------------------------------
DECLARE @now datetime
DECLARE @creatorKey uniqueidentifier
DECLARE @contactTypeKey uniqueidentifier
DECLARE @accessKey uniqueidentifier
DECLARE @contactKey uniqueidentifier
DECLARE @componentKey uniqueidentifier
DECLARE @defaultDepartmentGroupKey uniqueidentifier
DECLARE @defaultPerspectiveKey uniqueidentifier
DECLARE @id nvarchar(12)

SET @now = GETDATE()
SET @id = 'ASISystem'
SELECT @creatorKey = [UserKey] FROM [dbo].[UserMain] WHERE [UserId] = 'MANAGER'
SELECT @contactTypeKey = [ContactTypeKey] FROM [dbo].[ContactTypeRef] WHERE [ContactTypeDesc] = 'Individual'
SELECT @accessKey = [ProtectedAccessKey] FROM [dbo].[AccessArea] WHERE [Name] = 'Everyone Full Control'
SELECT @componentKey = [ComponentKey] FROM [dbo].[ComponentRegistry] WHERE [Name] = 'Individual' AND [InterfaceName] = 'BusinessController'
SELECT @defaultDepartmentGroupKey = [GroupKey]
  FROM [dbo].[GroupMain] gm INNER JOIN [dbo].[GroupTypeRef] gt ON gm.GroupTypeKey = gt.GroupTypeKey
 WHERE gm.[Name] = 'Administrative' AND gt.[GroupTypeName] = 'Department'
SELECT @defaultPerspectiveKey = [PerspectiveKey] FROM [dbo].[Perspective] WHERE [PerspectiveName] = 'Staff'

IF NOT EXISTS (SELECT 1 FROM [dbo].[ContactMain] WHERE [FullName] = 'System' OR [ContactKey] = '209935B1-C94E-472A-94CE-8C3F1526D4A5')
BEGIN
    SET @contactKey = '209935B1-C94E-472A-94CE-8C3F1526D4A5'
    INSERT INTO [dbo].[UniformRegistry] (UniformKey, ComponentKey) VALUES (@contactKey, @componentKey)
    INSERT INTO [dbo].[ContactMain] (ContactKey, ContactStatusCode, FullName, SortName, IsInstitute, NoSolicitationFlag, 
                                     SyncContactID, IsIDEditable, ID, PreferredAddressCategoryCode, IsSortNameOverridden,
                                     AccessKey, TextOnlyEmailFlag, ContactTypeKey, OptOutFlag,
                                     CreatedByUserKey, CreatedOn, UpdatedByUserKey, UpdatedOn)
    VALUES (@contactKey, 1, 'System', 'SYSTEM', 0, 0, '', 1, @id, 1, 0, @accessKey, 0, @contactTypeKey, 0,
            @creatorKey, @now, @creatorKey, @now)             
END
ELSE
BEGIN
    SELECT @contactKey = [ContactKey] FROM [dbo].[ContactMain] WHERE [FullName] = 'System'
    IF (@contactKey IS NULL) SET @contactKey = '209935B1-C94E-472A-94CE-8C3F1526D4A5'
    UPDATE [dbo].[ContactMain] 
       SET [SyncContactID] = '', [ID] = 'ASISystem', [FullName] = 'System'
     WHERE [ContactKey] = @contactKey
END

IF NOT EXISTS (SELECT 1 FROM [dbo].[Individual] WHERE [FirstName] = 'System' OR [ContactKey] = '209935B1-C94E-472A-94CE-8C3F1526D4A5')
BEGIN
    INSERT INTO [dbo].[Individual] (ContactKey, FirstName, MiddleName, LastName, Informal, PrimaryInstituteName, PrimaryInstituteTitle)
    VALUES (@contactKey, 'System', '', '', '', 'ASI', 'ASI System') 
END
ELSE
BEGIN
    SELECT @contactKey = [ContactKey] FROM [dbo].[Individual] WHERE [FirstName] = 'System'
    IF (@contactKey IS NULL) SET @contactKey = '209935B1-C94E-472A-94CE-8C3F1526D4A5'
    UPDATE [dbo].[Individual]
       SET [Gender] = NULL, 
           [FirstName] = 'System', [MiddleName] = '', [LastName] = '',
           [PrimaryInstituteName] = 'ASI',
           [PrimaryInstituteTitle] = 'ASI System'
     WHERE [ContactKey] = @contactKey
END

IF NOT EXISTS (SELECT 1 FROM [dbo].[UserMain] WHERE [UserId] = 'SYSTEM')
BEGIN
    IF NOT EXISTS (SELECT 1 FROM [dbo].[UserMain] WHERE UserKey = '209935B1-C94E-472A-94CE-8C3F1526D4A5')
    BEGIN
        INSERT INTO [dbo].[UserMain] ([UserKey], [ContactMaster], [UserId], [IsDisabled], 
                                      [EffectiveDate], [ExpirationDate], [CreatedByUserKey], [CreatedOn], [UpdatedByUserKey], [UpdatedOn], 
                                      [DefaultDepartmentGroupKey], [DefaultPerspectiveKey]) 
        VALUES (@contactKey, '', 'SYSTEM', 1, '20041230 00:00:00.000', NULL,
                @creatorKey, @now, @creatorKey, @now, @defaultDepartmentGroupKey, @defaultPerspectiveKey)
    END
    ELSE
    BEGIN
        UPDATE [dbo].[UserMain]
           SET [UserId] = 'SYSTEM', [ContactMaster] = '', [IsDisabled] = 1, [ExpirationDate] = NULL,
               [DefaultDepartmentGroupKey] = @defaultDepartmentGroupKey, [DefaultPerspectiveKey] = @defaultPerspectiveKey
         WHERE [UserKey] = '209935B1-C94E-472A-94CE-8C3F1526D4A5'
    END        
END
ELSE
BEGIN
    UPDATE [dbo].[UserMain]
       SET [ContactMaster] = '', [IsDisabled] = 1, [ExpirationDate] = NULL,
           [DefaultDepartmentGroupKey] = @defaultDepartmentGroupKey, [DefaultPerspectiveKey] = @defaultPerspectiveKey
     WHERE [UserId] = 'SYSTEM'
END
GO


-- Create GUEST account if one doesn't already exist
DECLARE @tempID int
DECLARE @tempAddressNum int
DECLARE @now datetime

SET @now = GETDATE()

IF NOT EXISTS (SELECT 1 FROM Name_Security WHERE WEB_LOGIN = 'GUEST')
BEGIN
    SET @tempID = NULL
    SELECT @tempID = ContactMaster FROM UserMain WHERE UserId = 'GUEST'
    IF @tempID IS NULL
    BEGIN
        EXEC sp_asi_GetCounter Name
        SELECT @tempID = LAST_VALUE from Counter where COUNTER_NAME = 'Name'
    END
    EXEC sp_asi_GetCounter Name_Address
    SELECT @tempAddressNum = LAST_VALUE from Counter where COUNTER_NAME = 'Name_Address'
    
    INSERT INTO [dbo].[Name] 
           ([ID], [LAST_FIRST], [FIRST_NAME], [FULL_NAME], [MEMBER_TYPE], [STATUS], 
            [MAIL_ADDRESS_NUM], [BILL_ADDRESS_NUM], [SHIP_ADDRESS_NUM],
            [JOIN_DATE], [DATE_ADDED], [LAST_UPDATED], [UPDATED_BY])
    VALUES (CAST(@tempID AS varchar(10)), 'GUEST', 'GUEST', 'GUEST', 'NM', 'A', 
            @tempAddressNum, @tempAddressNum, @tempAddressNum,
            @now, @now, @now, 'MANAGER')

    INSERT Name_Address (ID, ADDRESS_NUM, PURPOSE, PREFERRED_MAIL, PREFERRED_BILL, PREFERRED_SHIP)
    VALUES (CAST(@tempID AS varchar(10)), @tempAddressNum, 'Address', 1, 1, 1)

    INSERT Name_Security (ID, WEB_LOGIN, PASSWORD)
    VALUES (CAST(@tempID AS varchar(10)), 'GUEST', '')

    INSERT Name_Fin (ID) 
    VALUES (CAST(@tempID AS varchar(10)))
END

DECLARE @contactKey uniqueidentifier
DECLARE @contactStatusCode int
DECLARE @managerKey uniqueidentifier 
DECLARE @addressCategoryCode int
DECLARE @accessKey uniqueidentifier 
DECLARE @contactTypeKey uniqueidentifier 
DECLARE @defaultDepartmentGroupKey uniqueidentifier
DECLARE @defaultPerspectiveKey uniqueidentifier
DECLARE @componentKey uniqueidentifier

-- Look-up some required values
SELECT @contactKey = [UserKey] FROM [dbo].[UserMain] WHERE [UserId] = 'GUEST'
IF (@contactKey IS NULL) 
BEGIN
    SELECT @contactKey = [ContactKey] from [dbo].[ContactMain] WHERE [FullName] = 'GUEST'
    IF (@contactKey IS NULL)
    BEGIN
        IF EXISTS (SELECT 1 FROM [dbo].[ContactMain] WHERE [ContactKey] = '8650EB42-3034-471C-B8F2-9E79313E5C95')
            SET @contactKey = newid()
        ELSE
            SET @contactKey = '8650EB42-3034-471C-B8F2-9E79313E5C95'
    END
END
SELECT @contactStatusCode = [ContactStatusCode] FROM [dbo].[ContactStatusRef] WHERE [ContactStatusDesc] = 'Active'
SELECT @managerKey = [UserKey] FROM [dbo].[UserMain] WHERE [UserId] = 'MANAGER'
SELECT @addressCategoryCode = [AddressCategoryCode] from [dbo].[AddressCategoryRef] WHERE [AddressCategoryName] = 'Mail'
SELECT @accessKey = [ProtectedAccessKey] FROM [dbo].[AccessArea] WHERE [Name] = 'Everyone Full Control'
SELECT @contactTypeKey = [ContactTypeKey] FROM [dbo].[ContactTypeRef] WHERE [ContactTypeDesc] = 'Individual'
SELECT @defaultDepartmentGroupKey = [GroupKey]
  FROM [dbo].[GroupMain] gm INNER JOIN [dbo].[GroupTypeRef] gt ON gm.GroupTypeKey = gt.GroupTypeKey
 WHERE gm.[Name] = 'Administrative' AND gt.[GroupTypeName] = 'Department'
SELECT @defaultPerspectiveKey = [PerspectiveKey] FROM [dbo].[Perspective] WHERE [PerspectiveName] = 'Staff'
SELECT @componentKey = [ComponentKey] FROM [dbo].[ComponentRegistry] WHERE [Name] = 'Individual' AND [InterfaceName] = 'BusinessController'

-- Insert into ContactMain if not present
IF NOT EXISTS (SELECT 1 FROM [dbo].[ContactMain] WHERE [FullName] = 'GUEST' OR [ContactKey] = @contactKey)
BEGIN
    INSERT INTO [dbo].[UniformRegistry] (UniformKey, ComponentKey) VALUES (@contactKey, @componentKey)
    INSERT INTO [dbo].[ContactMain]
                ([ContactKey], [ContactStatusCode], [FullName], [SortName], [IsInstitute], [NoSolicitationFlag], 
                 [SyncContactID], [UpdatedOn], [UpdatedByUserKey], [IsIDEditable], [ID], [PreferredAddressCategoryCode],
                 [IsSortNameOverridden], [AccessKey], [CreatedByUserKey], [CreatedOn], [TextOnlyEmailFlag],
                 [ContactTypeKey], [OptOutFlag])
    VALUES (@contactKey, @contactStatusCode, 'GUEST', 'GUEST', 0, 0, 
            @tempID, @now, @managerKey, 0, @tempID, @addressCategoryCode, 
            0, @accessKey, @managerKey, @now, 0,
            @contactTypeKey, 0)
END
ELSE
BEGIN
    UPDATE [dbo].[ContactMain] 
       SET [FullName] = 'GUEST'
     WHERE [ContactKey] = @contactKey
END

-- Insert into Individual if not present
IF NOT EXISTS (SELECT 1 FROM [dbo].[Individual] WHERE [FirstName] = 'GUEST' OR [ContactKey] = @contactKey)
BEGIN
    INSERT INTO [dbo].[Individual]
                ([ContactKey], [PrefixCode], [FirstName], [MiddleName], [LastName], [SuffixCode], [Designation],
                 [Informal], [Gender])
    VALUES (@contactKey, '', 'GUEST', '', '', '', '', '', '')
END
ELSE
BEGIN
    UPDATE [dbo].[Individual]
       SET [Gender] = NULL, 
           [FirstName] = 'GUEST', [MiddleName] = '', [LastName] = '',
           [PrimaryInstituteName] = 'ASI'
     WHERE [ContactKey] = @contactKey
END

-- Insert into UserMain if not present
IF NOT EXISTS (SELECT 1 FROM [dbo].[UserMain] WHERE [UserId] = 'GUEST' OR UserKey = @contactKey)
BEGIN
    INSERT INTO [dbo].[UserMain]
                ([UserKey], [ContactMaster], [UserId], [IsDisabled], [EffectiveDate], [ExpirationDate],
                 [UpdatedByUserKey], [UpdatedOn], [CreatedByUserKey], [CreatedOn], 
                 [DefaultDepartmentGroupKey], [DefaultPerspectiveKey], [ProviderKey])
    VALUES (@contactKey, @tempID, 'GUEST', 0, '20000101 00:00:00', NULL, @managerKey, @now, @managerKey, @now,
            @defaultDepartmentGroupKey, @defaultPerspectiveKey, NULL)
END
GO

-- Create IMISLOG account if one doesn't already exist
DECLARE @tempID int
DECLARE @tempAddressNum int
DECLARE @now datetime
DECLARE @userID nvarchar(60)

SET @now = GETDATE()
SET @userID = 'IMISLOG'

IF NOT EXISTS (SELECT 1 FROM Name_Security WHERE WEB_LOGIN = @userID)
BEGIN
    SET @tempID = NULL
    SELECT @tempID = ContactMaster FROM UserMain WHERE UserId = @userID
    IF @tempID IS NULL
    BEGIN
        EXEC sp_asi_GetCounter Name
        SELECT @tempID = LAST_VALUE from Counter where COUNTER_NAME = 'Name'
    END
    EXEC sp_asi_GetCounter Name_Address
    SELECT @tempAddressNum = LAST_VALUE from Counter where COUNTER_NAME = 'Name_Address'
    
    -- Before inserting into Name, Name_Address, etc. create the ContactMain and Individual rows
    -- so we can try to use a well known ContactKey    
    DECLARE @contactKey uniqueidentifier
    DECLARE @contactStatusCode int
    DECLARE @managerKey uniqueidentifier 
    DECLARE @addressCategoryCode int
    DECLARE @accessKey uniqueidentifier 
    DECLARE @contactTypeKey uniqueidentifier 
    DECLARE @defaultDepartmentGroupKey uniqueidentifier
    DECLARE @defaultPerspectiveKey uniqueidentifier
    DECLARE @componentKey uniqueidentifier

    -- Look-up some required values
    SELECT @contactKey = [UserKey] FROM [dbo].[UserMain] WHERE [UserId] = 'IMISLOG'
    IF (@contactKey IS NULL) 
    BEGIN
        SELECT @contactKey = [ContactKey] from [dbo].[ContactMain] WHERE [FullName] = @userID
        IF (@contactKey IS NULL)
        BEGIN
            IF EXISTS (SELECT 1 FROM [dbo].[ContactMain] WHERE [ContactKey] = '498601F3-E217-4FCA-89D0-74F151253224')
                SET @contactKey = newid()
            ELSE
                SET @contactKey = '498601F3-E217-4FCA-89D0-74F151253224'
        END
    END
    SELECT @contactStatusCode = [ContactStatusCode] FROM [dbo].[ContactStatusRef] WHERE [ContactStatusDesc] = 'Active'
    SELECT @managerKey = [UserKey] FROM [dbo].[UserMain] WHERE [UserId] = 'MANAGER'
    SELECT @addressCategoryCode = [AddressCategoryCode] from [dbo].[AddressCategoryRef] WHERE [AddressCategoryName] = 'Mail'
    SELECT @accessKey = [ProtectedAccessKey] FROM [dbo].[AccessArea] WHERE [Name] = 'Everyone Full Control'
    SELECT @contactTypeKey = [ContactTypeKey] FROM [dbo].[ContactTypeRef] WHERE [ContactTypeDesc] = 'Individual'
    SELECT @defaultDepartmentGroupKey = [GroupKey]
      FROM [dbo].[GroupMain] gm INNER JOIN [dbo].[GroupTypeRef] gt ON gm.GroupTypeKey = gt.GroupTypeKey
     WHERE gm.[Name] = 'Administrative' AND gt.[GroupTypeName] = 'Department'
    SELECT @defaultPerspectiveKey = [PerspectiveKey] FROM [dbo].[Perspective] WHERE [PerspectiveName] = 'Staff'
    SELECT @componentKey = [ComponentKey] FROM [dbo].[ComponentRegistry] WHERE [Name] = 'Individual' AND [InterfaceName] = 'BusinessController'

    -- Insert into ContactMain if not present
    IF NOT EXISTS (SELECT 1 FROM [dbo].[ContactMain] WHERE [FullName] = @userID OR [ContactKey] = @contactKey)
    BEGIN
        INSERT INTO [dbo].[UniformRegistry] (UniformKey, ComponentKey) VALUES (@contactKey, @componentKey)
        INSERT INTO [dbo].[ContactMain]
                    ([ContactKey], [ContactStatusCode], [FullName], [SortName], [IsInstitute], [NoSolicitationFlag], 
                     [SyncContactID], [UpdatedOn], [UpdatedByUserKey], [IsIDEditable], [ID], [PreferredAddressCategoryCode],
                     [IsSortNameOverridden], [AccessKey], [CreatedByUserKey], [CreatedOn], [TextOnlyEmailFlag],
                     [ContactTypeKey], [OptOutFlag])
        VALUES (@contactKey, @contactStatusCode, @userID, @userID, 0, 0, 
                @tempID, @now, @managerKey, 0, @tempID, @addressCategoryCode, 
                0, @accessKey, @managerKey, @now, 0,
                @contactTypeKey, 0)
    END
    ELSE
    BEGIN
        UPDATE [dbo].[ContactMain] 
           SET [FullName] = @userID
         WHERE [ContactKey] = @contactKey
    END

    -- Insert into Individual if not present
    IF NOT EXISTS (SELECT 1 FROM [dbo].[Individual] WHERE [FirstName] = @userID OR [ContactKey] = @contactKey)
    BEGIN
        INSERT INTO [dbo].[Individual]
                    ([ContactKey], [PrefixCode], [FirstName], [MiddleName], [LastName], [SuffixCode], [Designation],
                     [Informal], [Gender])
        VALUES (@contactKey, '', @userID, '', '', '', '', '', '')
    END
    ELSE
    BEGIN
        UPDATE [dbo].[Individual]
           SET [Gender] = NULL, 
               [FirstName] = @userID, [MiddleName] = '', [LastName] = '',
               [PrimaryInstituteName] = 'ASI'
         WHERE [ContactKey] = @contactKey
    END

    -- Insert into UserMain if not present
    IF NOT EXISTS (SELECT 1 FROM [dbo].[UserMain] WHERE [UserId] = @userID OR UserKey = @contactKey)
    BEGIN
        INSERT INTO [dbo].[UserMain]
                    ([UserKey], [ContactMaster], [UserId], [IsDisabled], [EffectiveDate], [ExpirationDate],
                     [UpdatedByUserKey], [UpdatedOn], [CreatedByUserKey], [CreatedOn], 
                     [DefaultDepartmentGroupKey], [DefaultPerspectiveKey], [ProviderKey])
        VALUES (@contactKey, @tempID, @userID, 0, '20000101 00:00:00', NULL, 
                @managerKey, @now, @managerKey, @now,
                @defaultDepartmentGroupKey, @defaultPerspectiveKey, NULL)
    END
    
    INSERT INTO [dbo].[Name] 
           ([ID], [LAST_FIRST], [FIRST_NAME], [FULL_NAME], [MEMBER_TYPE], [STATUS], 
            [MAIL_ADDRESS_NUM], [BILL_ADDRESS_NUM], [SHIP_ADDRESS_NUM],
            [JOIN_DATE], [DATE_ADDED], [LAST_UPDATED], [UPDATED_BY])
    VALUES (CAST(@tempID AS varchar(10)), @userID, @userID, @userID, 'NM', 'A', 
            @tempAddressNum, @tempAddressNum, @tempAddressNum,
            @now, @now, @now, 'MANAGER')

    INSERT Name_Address (ID, ADDRESS_NUM, PURPOSE, PREFERRED_MAIL, PREFERRED_BILL, PREFERRED_SHIP)
    VALUES (CAST(@tempID AS varchar(10)), @tempAddressNum, 'Address', 1, 1, 1)

    INSERT Name_Security (ID, WEB_LOGIN, PASSWORD)
    VALUES (CAST(@tempID AS varchar(10)), @userID, '')

    INSERT Name_Fin (ID) 
    VALUES (CAST(@tempID AS varchar(10)))
END

--------------------------
-- Create provider entries
--------------------------
DECLARE @applicationKey uniqueidentifier
DECLARE @providerKey uniqueidentifier
DECLARE @beginningOfTime datetime

SET @beginningOfTime = '17540101 00:00:00.000'

SELECT @applicationKey = [ApplicationId] FROM [dbo].[aspnet_Applications] WHERE [ApplicationName] = 'iMIS'
SELECT @providerKey = [UserId] FROM [dbo].[aspnet_Users] WHERE [UserName] = @userID
IF (@providerKey IS NULL)
    SET @providerKey = '5A4AC0B4-C8E1-443E-9CA7-A05AABAFE445'
   

IF NOT EXISTS (SELECT 1 FROM [dbo].[aspnet_Users] WHERE [UserName] = @userID)
    INSERT INTO [dbo].[aspnet_Users] ([ApplicationId], [UserId], [UserName], [LoweredUserName], [MobileAlias], [IsAnonymous], [LastActivityDate])
    VALUES (@applicationKey, @providerKey, @userID, LOWER(@userID), NULL, 0, @now)

IF NOT EXISTS (SELECT 1 FROM [dbo].[aspnet_Membership] WHERE [UserId] = @providerKey)
    INSERT INTO [dbo].[aspnet_Membership] ([ApplicationId], [UserId], [Password], [PasswordFormat], [PasswordSalt], 
                                           [IsApproved], [IsLockedOut], [CreateDate], [LastLoginDate], [LastPasswordChangedDate], [LastLockoutDate],
                                           [FailedPasswordAttemptCount], [FailedPasswordAttemptWindowStart], [FailedPasswordAnswerAttemptCount], [FailedPasswordAnswerAttemptWindowStart])
    VALUES (@applicationKey, @providerKey, 'tnQvoHO1vEpl3Von8jhG/7tlhx0=', 1, 'dH6mEjQq6q6l+/TqIJekqg==', 
            1, 0, @now, @now, @now, @beginningOfTime, 0, @beginningOfTime, 0, @beginningOfTime)

UPDATE [dbo].[UserMain] 
   SET [ProviderKey] = LOWER(@providerKey)
 WHERE [UserId] = @userID

GO



GO
-- script to fix up a restored iMIS db for iMIS15
--    Henry Huey 13 Sept 2006
--    Paul Bradshaw 15 Feb 2010
--    Paul Bradshaw 22 Aug 2012
--    Paul Bradshaw 13 Aug 2013
--    Paul Bradshaw 28 Aug 2014
--    Paul Bradshaw 16 Oct 2014
--    Paul Bradshaw 14 Jan 2015
SET NOCOUNT ON
SET ANSI_DEFAULTS ON
SET IMPLICIT_TRANSACTIONS OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET NOCOUNT ON
GO

-------------------------------------------------------
-- Ensure Database Owner/Authorization is correctly set
-------------------------------------------------------
DECLARE @authorizationSql nvarchar(MAX);
SELECT @authorizationSql = 'ALTER AUTHORIZATION ON DATABASE::[' + DB_NAME() + '] TO [' + SYSTEM_USER + '];';
EXEC (@authorizationSql);
GO

-------------------------------------------------------------------------------
-- Ensure required Name_Fin, Name_Security, and Name_Security_Groups rows exist
-------------------------------------------------------------------------------
PRINT '   Ensuring Contact Integrity'
INSERT INTO Name_Fin (ID)
SELECT a.ID FROM Name a LEFT OUTER JOIN Name_Fin b ON a.ID = b.ID
WHERE b.ID IS NULL
GO
INSERT INTO Name_Security (ID)
SELECT a.ID FROM Name a LEFT OUTER JOIN Name_Security b ON a.ID = b.ID
WHERE b.ID IS NULL
GO
INSERT INTO Name_Security_Groups (ID)
SELECT a.ID FROM Name a LEFT OUTER JOIN Name_Security_Groups b ON a.ID = b.ID
WHERE b.ID IS NULL
GO


-- Create defaults required by desktop if necessary and
-- ensure ANSI and Compatibility Settings are correct on the DB
PRINT '   Ensuring proper database settings'

IF NOT EXISTS (SELECT 1 FROM sys.objects WHERE [name] = 'char_default')
    EXECUTE(N'CREATE DEFAULT [dbo].[char_default] AS '''' ')
IF NOT EXISTS (SELECT 1 FROM sys.objects WHERE [name] = 'boolean_default')
    EXECUTE(N'CREATE DEFAULT [dbo].[boolean_default] AS 0 ')

DECLARE @sql nvarchar(400)
SET @sql = N'ALTER DATABASE ' + DB_NAME() + N' SET ANSI_NULL_DEFAULT ON WITH NO_WAIT'
EXEC (@sql)
SET @sql = N'ALTER DATABASE ' + DB_NAME() + N' SET ANSI_NULLS ON WITH NO_WAIT'
EXEC (@sql)
SET @sql = N'ALTER DATABASE ' + DB_NAME() + N' SET ANSI_PADDING ON WITH NO_WAIT'
EXEC (@sql)
SET @sql = N'ALTER DATABASE ' + DB_NAME() + N' SET ANSI_WARNINGS ON WITH NO_WAIT'
EXEC (@sql)
SET @sql = N'ALTER DATABASE ' + DB_NAME() + N' SET ARITHABORT ON WITH NO_WAIT'
EXEC (@sql)
SET @sql = N'ALTER DATABASE ' + DB_NAME() + N' SET CONCAT_NULL_YIELDS_NULL ON WITH NO_WAIT'
EXEC (@sql)
SET @sql = N'ALTER DATABASE ' + DB_NAME() + N' SET QUOTED_IDENTIFIER ON WITH NO_WAIT'
EXEC (@sql)
SET @sql = N'ALTER DATABASE ' + DB_NAME() + N' SET NUMERIC_ROUNDABORT OFF WITH NO_WAIT'
EXEC (@sql)
DECLARE @level nvarchar(10)
SELECT @level = LEFT(CONVERT(nvarchar(10), SERVERPROPERTY(N'ProductVersion')), CHARINDEX('.', CONVERT(nvarchar(10), SERVERPROPERTY(N'ProductVersion'))) - 1) + N'0'
SET @sql = N'ALTER DATABASE ' + DB_NAME() + N' SET COMPATIBILITY_LEVEL = ' + @level
EXEC (@sql)
GO

-- Update temp file paths in System Config
PRINT '   Updating temp file paths in System Config'

DECLARE @dir nvarchar(400)
DECLARE @slashPos int
SELECT @dir = [ParameterValue] FROM [dbo].[SystemConfig] WHERE [ParameterName] = N'TempDirectory'
SET @slashPos = LEN(@dir) - CHARINDEX('\',REVERSE(@dir))
IF (@slashPos > 0 AND @slashPos < LEN(@dir))
BEGIN
    SET @dir = LEFT(@dir, @slashpos + 1)
    DECLARE @tempDir nvarchar(400)
    SELECT @tempDir = REPLACE(@@SERVERNAME, '\', '-') + '_' + DB_NAME()
    SET @dir = @dir + @tempDir
    UPDATE [dbo].[SystemConfig] 
       SET [ParameterValue] = @dir 
     WHERE [ParameterName] = 'TempDirectory'
END
GO

DECLARE @dir nvarchar(400)
DECLARE @slashPos int
SELECT @dir = [ParameterValue] FROM [dbo].[SystemConfig] WHERE [ParameterName] = N'CrystalReports.TempPath'
SET @slashPos = LEN(@dir) - CHARINDEX('\',REVERSE(@dir))
IF (@slashPos > 0 AND @slashPos < LEN(@dir))
BEGIN
    SET @dir = LEFT(@dir, @slashpos + 1)
    DECLARE @tempDir nvarchar(400)
    SELECT @tempDir = REPLACE(@@SERVERNAME, '\', '-') + '_' + DB_NAME()
    SET @dir = @dir + @tempDir
    UPDATE [dbo].[SystemConfig] 
       SET [ParameterValue] = @dir 
     WHERE [ParameterName] = 'CrystalReports.TempPath'
END
GO

DECLARE @dir nvarchar(400)
DECLARE @slashPos int
SELECT @dir = [ParameterValue] FROM [dbo].[SystemConfig] WHERE [ParameterName] = 'ReportingServices.TempPath'
SET @slashPos = LEN(@dir) - CHARINDEX('\',REVERSE(@dir))
IF (@slashPos > 0 AND @slashPos < LEN(@dir))
BEGIN
    SET @dir = LEFT(@dir, @slashpos + 1)
    DECLARE @tempDir nvarchar(400)
    SELECT @tempDir = REPLACE(@@SERVERNAME, '\', '-') + '_' + DB_NAME()
    SET @dir = @dir + @tempDir
    UPDATE [dbo].[SystemConfig] 
       SET [ParameterValue] = @dir 
     WHERE [ParameterName] = 'ReportingServices.TempPath'
END
GO

---------------------------------------------------------
-- Delete all orphaned database users in a given database
---------------------------------------------------------
PRINT '   Deleting orphaned iMIS database users'
DECLARE @sql nvarchar(max)
DECLARE @userName sysname
DECLARE theCursor CURSOR FAST_FORWARD FOR
SELECT CAST(name AS sysname) AS [Orphaned User]
  FROM sys.sysusers su
 WHERE su.islogin = 1 AND su.status <> 16 AND 
       (su.name LIKE 'MANAGER_%' OR su.name LIKE 'IMISUSER_%')
       AND su.name <> 'MANAGER_' + db_name() and su.name <> 'IMISUSER_' + db_name()
       AND NOT EXISTS (
           SELECT 1
             FROM master.sys.syslogins sl
            WHERE su.sid = sl.sid
       )

OPEN theCursor
FETCH NEXT FROM theCursor INTO @userName
WHILE @@FETCH_STATUS = 0 -- spin through user entries
BEGIN
    PRINT '       ' + @userName
    SELECT @sql = N'IF EXISTS (SELECT 1 FROM sys.schemas WHERE [name] = ''' + @userName + N''') DROP SCHEMA [' + @userName + N']'
    EXEC (@sql)
    SELECT @sql = N'DROP USER [' + @userName + N']'
    EXEC (@sql)
    FETCH NEXT FROM theCursor INTO @userName
END
CLOSE theCursor
DEALLOCATE theCursor

------------------------------------
-- create the IMIS role if necessary
------------------------------------
IF NOT EXISTS (SELECT 1 FROM sys.database_principals WHERE [name] = N'IMIS' AND [type_desc] = N'DATABASE_ROLE' )
BEGIN
    CREATE ROLE [IMIS] AUTHORIZATION [dbo]
END
GO

-- Drop obsolete System_Param values if present
DELETE FROM System_Params 
 WHERE ParameterName = 'System_Control.WebServerURL'

-- Ensure correct security model is set for backwards compatibility
UPDATE System_Params SET ShortValue = '3'
 WHERE ParameterName = 'System_Control.SQLSecurityModel'
GO

IF EXISTS (SELECT 1 FROM master.sys.server_principals WHERE IS_SRVROLEMEMBER ('sysadmin', [name]) = 1 AND [name] = SYSTEM_USER)
BEGIN
    ----------------------------------------------
    -- Create the Master and Manager SQL passwords
    ----------------------------------------------
    DECLARE @managerPassword nvarchar(50)
    SELECT @managerPassword = newid()
    DECLARE @userPassword nvarchar(50)
    SELECT @userPassword = newid()
    DECLARE @execSQL nvarchar(1000)
    DECLARE @userName  nvarchar(200)
    DECLARE @schemaName nvarchar(200)

    ----------------------------------------
    -- Create the MANAGER reserved SQL login
    ----------------------------------------
    SELECT @userName = 'MANAGER' + '_' + DB_NAME()
    PRINT '   Ensuring Manager Login ' + @userName + ' is Present'

    -- Drop MANAGER schema, alias, db user, and login if they already exist
    IF EXISTS (SELECT 1 FROM sys.schemas WHERE [name] = @userName)
    BEGIN
        SELECT @execSQL = 'DROP SCHEMA [' + @userName + ']'
        EXEC (@execSQL)
    END
    SELECT @schemaName = name
      FROM sys.schemas s
     WHERE s.principal_id = USER_ID(@userName);
    IF @schemaName IS NOT NULL
    BEGIN
        SELECT @execSQL = 'DROP SCHEMA [' + @schemaName + ']'
        EXEC (@execSQL)
    END

    IF EXISTS (SELECT 1 FROM sys.sysusers WHERE name = @userName)
    BEGIN
        EXEC sp_dropuser @userName
    END

    BEGIN TRY
        IF EXISTS (SELECT 1 FROM sys.sql_logins WHERE name = @userName)
        BEGIN
            EXEC sp_droplogin @userName
        END
    END TRY
    BEGIN CATCH
        PRINT '   *** ERROR Attempting to Create Manager Login'
        PRINT '   *** ' + ERROR_MESSAGE()
        PRINT '   *** Please ensure all iMIS Desktop users are logged out'
        -- Restore user
        IF NOT EXISTS (SELECT 1 FROM sys.sysusers WHERE [name] = @userName) 
        BEGIN
            SELECT @execSQL = 'sp_adduser [' + @userName + '],  [' + @userName + ']'
            EXEC (@execSQL)
        END
        -- restore role
        SELECT @execSQL = 'sp_addrolemember ''db_owner'', [' + @userName + ']' 
        EXEC (@execSQL)
        RETURN
    END CATCH

    -- Add MANAGER login, user, and add user to roles
    IF NOT EXISTS(SELECT name FROM sys.syslogins WHERE [name] = @userName)
    BEGIN
        SELECT @execSQL = 'sp_addlogin [' + @userName + '], ''' + @managerPassword + ''', ' + db_name()
        EXEC (@execSQL)
    END

    IF NOT EXISTS (SELECT 1 FROM sys.sysusers WHERE [name] = @userName) 
    BEGIN
        SELECT @execSQL = 'sp_adduser [' + @userName + '],  [' + @userName + ']'
        EXEC (@execSQL)
    END

    -- Add MANAGER to db_owner
    SELECT @execSQL = 'sp_addrolemember ''db_owner'', [' + @userName + ']' 
    EXEC (@execSQL)


    -----------------------------------------
    -- create the IMISUSER reserved SQL login
    -----------------------------------------
    SELECT @userName = 'IMISUSER' + '_' + db_name()
    PRINT '   Ensuring User Logon ' + @userName + ' is Present'

    -- Drop IMISUSER schema, user, and login
    IF EXISTS (SELECT 1 from sys.schemas WHERE [name] = @userName)
    BEGIN
        SELECT @execSQL = 'DROP SCHEMA [' + @userName + ']'
        EXEC (@execSQL)
    END
    SELECT @schemaName = name
      FROM sys.schemas s
     WHERE s.principal_id = USER_ID(@userName);
    IF @schemaName IS NOT NULL
    BEGIN
        SELECT @execSQL = 'DROP SCHEMA [' + @schemaName + ']'
        EXEC (@execSQL)
    END

    IF EXISTS (SELECT 1 FROM sys.sysusers WHERE [name] = @userName)
    BEGIN
        EXEC sp_dropuser @userName
    END

    BEGIN TRY
        IF EXISTS (SELECT 1 FROM master..syslogins WHERE [name] = @userName)
        BEGIN
            EXEC sp_droplogin @userName
        END
    END TRY
    BEGIN CATCH
        PRINT '   *** ERROR Attempting to Create Manager Login'
        PRINT '   *** ' + ERROR_MESSAGE()
        PRINT '   *** Please ensure all iMIS Desktop users are logged out'
        -- Restore user
        IF NOT EXISTS (SELECT 1 FROM sys.sysusers WHERE [name] = @userName) 
        BEGIN
            SELECT @execSQL = 'sp_adduser [' + @userName + '], [' + @userName + ']'
            EXEC (@execSQL)
        END
        -- restore user to IMIS role
        SELECT @execSQL = 'sp_addrolemember ''IMIS'', [' + @userName + ']'
        EXEC (@execSQL)
        RETURN
    END CATCH

    -- Add the IMIS login, user, and add user to roles
    IF NOT EXISTS(SELECT [name] FROM master.dbo.syslogins WHERE [name] = @userName)
    BEGIN
        SELECT @execSQL = 'sp_addlogin [' + @userName + '], ''' + @userPassword + ''', ' + db_name()
        EXEC (@execSQL)
    END

    IF NOT EXISTS (SELECT 1 FROM sys.sysusers WHERE [name] = @userName) 
    BEGIN
        SELECT @execSQL = 'sp_adduser [' + @userName + '], [' + @userName + ']'
        EXEC (@execSQL)
    END

    -- Add IMISUSER to IMIS role
    SELECT @execSQL = 'sp_addrolemember ''IMIS'', [' + @userName + ']'
    EXEC (@execSQL)

    -- Update password in database
    DELETE FROM System_Params 
     WHERE ParameterName = 'System_Control.SQLManagerPassword'
        
    INSERT INTO System_Params (ParameterName, ShortValue) 
    VALUES ('System_Control.SQLManagerPassword', @managerPassword)

    DELETE FROM System_Params 
     WHERE ParameterName = 'System_Control.SQLMasterPassword'

    INSERT INTO System_Params (ParameterName, ShortValue) 
    VALUES ('System_Control.SQLMasterPassword', @userPassword)
END
ELSE
    BEGIN
        PRINT '   WARNING: Not running as Sysadmin User: Skipping Recreation of iMIS SQL Logins'
        -- Check for MANAGER schema, alias, db user, and login if they already exist
        IF NOT EXISTS (SELECT 1 FROM sys.schemas WHERE [name] = 'MANAGER_' + DB_NAME())
        BEGIN
            PRINT '      WARNING: Cannot re-create missing login for MANAGER_' + DB_NAME();
        END
        ELSE
        BEGIN
            PRINT '      Login for MANAGER_' + DB_NAME() + ' exists';
        END
        -- Check for IMISUser schema, alias, db user, and login if they already exist
        IF NOT EXISTS (SELECT 1 FROM sys.schemas WHERE [name] = 'IMISUSER_' + DB_NAME())
        BEGIN
            PRINT '      WARNING: Cannot re-create missing login for IMISUSER_' + DB_NAME();
        END
        ELSE
        BEGIN
            PRINT '      Login for IMISUSER_' + DB_NAME() + ' exists';
        END
    END
GO


-- Create ASIGOPHER user
PRINT '   Ensuring iMIS Standard Users are Present'
IF EXISTS (SELECT * FROM sys.schemas WHERE name = N'ASIGOPHER')
BEGIN
    ALTER AUTHORIZATION ON SCHEMA::ASIGOPHER TO dbo
    DROP SCHEMA [ASIGOPHER]
END
GO
IF  EXISTS (SELECT * FROM sys.database_principals WHERE name = N'ASIGOPHER')
BEGIN
    DROP USER [ASIGOPHER]
END
GO

CREATE USER [ASIGOPHER] WITHOUT LOGIN WITH DEFAULT_SCHEMA=[ASIGOPHER]
GO
CREATE SCHEMA [ASIGOPHER] AUTHORIZATION [ASIGOPHER]
GO

-- Create IMISUser user
IF EXISTS (SELECT * FROM sys.schemas WHERE name = N'IMISUSER')
BEGIN
    ALTER AUTHORIZATION ON SCHEMA::IMISUSER TO dbo
    DROP SCHEMA [IMISUSER]
END
IF  EXISTS (SELECT * FROM sys.database_principals WHERE name = N'IMISUSER')
BEGIN
    DROP USER [IMISUSER]
END
GO

CREATE USER [IMISUSER] WITHOUT LOGIN WITH DEFAULT_SCHEMA=[IMISUSER]
GO

-------------------------------------------------------------------------------------------------------
-- Ensure SQL Broker is enabled for push notifications & enable iMISPublishService and iMISPublishQueue
-------------------------------------------------------------------------------------------------------
PRINT '   Enabling iMISPublishQueue and Broker'
DECLARE @dbname sysname;
DECLARE @sql nvarchar(500);
SELECT @dbname = DB_NAME();
IF (SELECT COALESCE(SERVERPROPERTY ('IsHadrEnabled'), 0)) <> 1
BEGIN
    IF (SELECT is_broker_enabled FROM sys.databases WHERE name = @dbname) <> 1
    BEGIN
        BEGIN TRY
        SET @sql = N'ALTER DATABASE ' + @dbname + N' SET ENABLE_BROKER WITH ROLLBACK IMMEDIATE';
        EXEC sp_executesql @sql;
        END TRY
        BEGIN CATCH
        SET @sql = N'ALTER DATABASE ' + @dbname + N' SET NEW_BROKER WITH ROLLBACK IMMEDIATE';
        EXEC sp_executesql @sql;
        END CATCH;
    END
END
ELSE
BEGIN
    IF (SELECT is_broker_enabled FROM sys.databases WHERE name = @dbname) <> 1
    BEGIN
        PRINT '   WARNING: SQL Broker is not enabled; Cannot enable due to participation in an AlwaysOn Availability Group';
    END
END 

IF EXISTS (SELECT * FROM sys.services WHERE name = N'iMISPublishService')
     DROP SERVICE iMISPublishService;
IF EXISTS (SELECT * FROM sys.service_queues WHERE name = N'iMISPublishQueue')
     DROP QUEUE iMISPublishQueue;

CREATE QUEUE iMISPublishQueue;

CREATE SERVICE iMISPublishService ON QUEUE iMISPublishQueue
([http://schemas.microsoft.com/SQL/Notifications/PostQueryNotification]);
GO


PRINT '   Complete'
SET NOCOUNT OFF
GO
